heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  image:
    type: string
    description: Image ID or image name to use for the server4
    default: Debian Jessie (stable)
    constraints:
      - allowed_values: 
        - Debian Jessie (stable)
        - Fedora 20
  flavor:
    type: string
    description: Sabor de la instancia
    default: m1.small
    constraints:
      - allowed_values: [m1.small, m1.medium]
        description: InstanceType must be one of m1.small, m1.medium or m1.large
  key_name:
    type: string
    default: clave_ale
    description: Clave SSH
  user_name:
    type: string
    label: User Name
    description: User name to be configured for the application
    constraints:
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: El usuario debe empezar con mayuscula


resources:
  Instancia_de_prueba:
    type: OS::Nova::Server
    properties:
      key_name: {get_param: key_name}
      image: {get_param: image}
      flavor: {get_param: flavor}
      admin_user: {get_param: user_name}
      networks: [{"network":"red de alejandro.nieto"}]


outputs:
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [Instancia_de_prueba, first_address] }

# Ejemplo de dependencias entre resources:

# En este caso el server1 depende de los server2 y 3
# resources:
#   server1:
#     type: OS::Nova::Server
#     depends_on: [ server2, server3 ]

#   server2:
#     type: OS::Nova::Server

#   server3:
#     type: OS::Nova::Server



# Esto es lo ideal para definir la red en PARAMETERS y asociarle una IP flotante a una instancia:

heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
   network:
     description: name of network used to launch instance.
     type: string
     default: red de alejandro.nieto

 resources:
   inst1:
     type: OS::Nova::Server
     properties:
       flavor: m1.small
       image: ubuntu-trusty-x86_64
       networks:
         - network: {get_param: network}

   floating_ip:
     type: OS::Neutron::FloatingIP
     properties:
       floating_network: ext-net

   association:
     type: OS::Neutron::FloatingIPAssociation
     properties:
       floatingip_id: { get_resource: floating_ip }
       port_id: {get_attr: [inst1, addresses, {get_param: net}, 0, port]}


# Otra forma de asociaci√≥n de IP:

   association:
     type: OS::Neutron::FloatingIPAssociation
     properties:
       floatingip_id: { get_resource: floating_ip }
       port_id: { get_resource: instance_port }


